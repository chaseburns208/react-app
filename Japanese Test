import React, { useState } from 'react';

const JapaneseProficiencyQuiz = () => {
  const [currentStage, setCurrentStage] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState({ hiragana: 0, katakana: 0, vocab: 0, grammar: 0, kanji: 0 });
  const [answers, setAnswers] = useState([]);
  const [quizComplete, setQuizComplete] = useState(false);
  const [showExplanation, setShowExplanation] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  
  // Quiz content organized by stages that roughly correspond to textbook progression
  const quizStages = [
    {
      name: "Hiragana & Katakana",
      questions: [
        {
          question: "Which hiragana represents 'a'?",
          options: ["あ", "い", "う", "え"],
          correctAnswer: "あ",
          type: "hiragana"
        },
        {
          question: "What sound does this hiragana make: き",
          options: ["ka", "ki", "ku", "ko"],
          correctAnswer: "ki",
          type: "hiragana"
        },
        {
          question: "Which katakana represents 'su'?",
          options: ["ス", "シ", "セ", "サ"],
          correctAnswer: "ス",
          type: "katakana"
        },
        {
          question: "What does this katakana spell: コンピューター",
          options: ["Television", "Telephone", "Computer", "Camera"],
          correctAnswer: "Computer",
          type: "katakana"
        }
      ]
    },
    {
      name: "Basic Vocabulary & Particles",
      questions: [
        {
          question: "What does 'おはよう' mean?",
          options: ["Hello", "Good morning", "Good night", "Thank you"],
          correctAnswer: "Good morning",
          type: "vocab"
        },
        {
          question: "Which particle marks the subject of a sentence?",
          options: ["は (wa)", "を (wo)", "に (ni)", "で (de)"],
          correctAnswer: "は (wa)",
          type: "grammar"
        },
        {
          question: "What does '私は学生です' mean?",
          options: ["I am a teacher", "I am a student", "I am Japanese", "I am hungry"],
          correctAnswer: "I am a student",
          type: "grammar"
        },
        {
          question: "Which particle would you use to mark the destination in 'I go to school'?",
          options: ["を (wo)", "に (ni)", "で (de)", "から (kara)"],
          correctAnswer: "に (ni)",
          type: "grammar"
        }
      ]
    },
    {
      name: "Verb Forms & Basic Grammar",
      questions: [
        {
          question: "What is the -masu form of 食べる (taberu)?",
          options: ["食べます", "食べました", "食べません", "食べれます"],
          correctAnswer: "食べます",
          type: "grammar"
        },
        {
          question: "Which is the correct て-form of 行く (iku)?",
          options: ["行って", "行きて", "行けて", "行いて"],
          correctAnswer: "行って",
          type: "grammar"
        },
        {
          question: "What does the grammar pattern 'Verb-たい' express?",
          options: ["Past action", "Obligation", "Desire", "Ability"],
          correctAnswer: "Desire",
          type: "grammar"
        },
        {
          question: "Which is the correct negative past form of 見る (miru)?",
          options: ["見ません", "見ませんでした", "見なかった", "見ないでした"],
          correctAnswer: "見ませんでした",
          type: "grammar"
        }
      ]
    },
    {
      name: "Intermediate Grammar",
      questions: [
        {
          question: "What does the grammar pattern 'Verb-てから' mean?",
          options: ["While doing", "After doing", "Before doing", "In order to do"],
          correctAnswer: "After doing",
          type: "grammar"
        },
        {
          question: "What is the potential form of 飲む (nomu)?",
          options: ["飲まれる", "飲める", "飲みられる", "飲もう"],
          correctAnswer: "飲める",
          type: "grammar"
        },
        {
          question: "Which sentence uses the causative form correctly?",
          options: [
            "先生は宿題をします (The teacher does homework)",
            "先生は学生に宿題をさせます (The teacher makes the students do homework)",
            "先生は宿題ができます (The teacher can do homework)",
            "先生は宿題をしません (The teacher doesn't do homework)"
          ],
          correctAnswer: "先生は学生に宿題をさせます (The teacher makes the students do homework)",
          type: "grammar"
        },
        {
          question: "What is the correct way to say 'If it rains tomorrow, I will stay home'?",
          options: [
            "明日雨が降ったら、家にいます",
            "明日雨が降ると、家にいました",
            "明日雨が降るなら、家にいません",
            "明日雨が降っても、家にいます"
          ],
          correctAnswer: "明日雨が降ったら、家にいます",
          type: "grammar"
        }
      ]
    },
    {
      name: "Kanji & Advanced Grammar",
      questions: [
        {
          question: "What does this kanji mean: 食",
          options: ["Water", "Eat/Food", "Write", "Read"],
          correctAnswer: "Eat/Food",
          type: "kanji"
        },
        {
          question: "Which is the correct reading for 学生?",
          options: ["がくせ", "がくせい", "がっこう", "せいと"],
          correctAnswer: "がくせい",
          type: "kanji"
        },
        {
          question: "How do you express 'I wish I had studied more' in Japanese?",
          options: [
            "もっと勉強したかった",
            "もっと勉強すればよかった",
            "もっと勉強したほうがいい",
            "もっと勉強しなければならない"
          ],
          correctAnswer: "もっと勉強すればよかった",
          type: "grammar"
        },
        {
          question: "Which sentence correctly uses the passive form?",
          options: [
            "先生は学生を褒めた (The teacher praised the student)",
            "学生は先生に褒めた (The student praised the teacher)",
            "学生は先生に褒められた (The student was praised by the teacher)",
            "先生は学生に褒められた (The teacher was praised by the student)"
          ],
          correctAnswer: "学生は先生に褒められた (The student was praised by the teacher)",
          type: "grammar"
        }
      ]
    }
  ];

  const handleAnswerSelect = (answer) => {
    setSelectedAnswer(answer);
    setShowExplanation(true);
    
    const currentQuiz = quizStages[currentStage];
    const question = currentQuiz.questions[currentQuestion];
    
    if (answer === question.correctAnswer) {
      setScore(prev => ({
        ...prev,
        [question.type]: prev[question.type] + 1
      }));
    }
    
    // Record answer for later analysis
    setAnswers([...answers, {
      stage: currentStage,
      question: question.question,
      userAnswer: answer,
      correctAnswer: question.correctAnswer,
      correct: answer === question.correctAnswer,
      type: question.type
    }]);
  };

  const handleNextQuestion = () => {
    setShowExplanation(false);
    setSelectedAnswer(null);
    
    const currentQuiz = quizStages[currentStage];
    
    if (currentQuestion < currentQuiz.questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else if (currentStage < quizStages.length - 1) {
      setCurrentStage(currentStage + 1);
      setCurrentQuestion(0);
    } else {
      setQuizComplete(true);
    }
  };

  const resetQuiz = () => {
    setCurrentStage(0);
    setCurrentQuestion(0);
    setScore({ hiragana: 0, katakana: 0, vocab: 0, grammar: 0, kanji: 0 });
    setAnswers([]);
    setQuizComplete(false);
    setShowExplanation(false);
    setSelectedAnswer(null);
  };

  // Calculate proficiency level and recommendations
  const calculateResults = () => {
    const types = Object.keys(score);
    const totalPossible = {
      hiragana: 2,
      katakana: 2,
      vocab: 1,
      grammar: 15,
      kanji: 2
    };
    
    const percentageScore = types.reduce((acc, type) => {
      return acc + (score[type] / totalPossible[type]) * 100;
    }, 0) / types.length;
    
    // Determine stages mastered
    const stageMastery = [];
    let recommendedStage = 0;
    
    quizStages.forEach((stage, index) => {
      const stageQuestions = stage.questions;
      const stageAnswers = answers.filter(a => a.stage === index);
      
      const correctAnswers = stageAnswers.filter(a => a.correct).length;
      const masteryPercentage = (correctAnswers / stageQuestions.length) * 100;
      
      stageMastery.push({
        name: stage.name,
        masteryPercentage: masteryPercentage,
        mastered: masteryPercentage >= 70
      });
      
      if (masteryPercentage < 70 && recommendedStage === index) {
        recommendedStage = index;
      }
    });
    
    // Map to textbook progression
    const genki = [
      "Genki I (Chapters 1-3)",
      "Genki I (Chapters 4-6)",
      "Genki I (Chapters 7-9)",
      "Genki I (Chapters 10-12) / Genki II (Chapters 13-15)",
      "Genki II (Chapters 16-18) and beyond"
    ];
    
    const jfz = [
      "Japanese From Zero Book 1",
      "Japanese From Zero Book 2",
      "Japanese From Zero Book 3",
      "Japanese From Zero Book 4",
      "Japanese From Zero Book 5 and beyond"
    ];
    
    return {
      percentageScore,
      stageMastery,
      recommendedStage,
      recommendedGenki: genki[recommendedStage],
      recommendedJFZ: jfz[recommendedStage]
    };
  };

  if (quizComplete) {
    const results = calculateResults();
    
    return (
      <div className="p-6 bg-gray-50 rounded-lg shadow-lg max-w-2xl mx-auto">
        <h1 className="text-2xl font-bold text-center mb-6 text-indigo-700">Your Japanese Proficiency Results</h1>
        
        <div className="mb-6 p-4 bg-white rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-2 text-indigo-600">Overall Score</h2>
          <div className="flex items-center justify-center">
            <div className="relative h-32 w-32">
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="text-3xl font-bold text-indigo-800">{Math.round(results.percentageScore)}%</span>
              </div>
              <svg className="h-32 w-32" viewBox="0 0 36 36">
                <path
                  d="M18 2.0845
                    a 15.9155 15.9155 0 0 1 0 31.831
                    a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke="#eee"
                  strokeWidth="2"
                />
                <path
                  d="M18 2.0845
                    a 15.9155 15.9155 0 0 1 0 31.831
                    a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke="#4f46e5"
                  strokeWidth="2"
                  strokeDasharray={`${results.percentageScore}, 100`}
                />
              </svg>
            </div>
          </div>
        </div>
        
        <div className="mb-6 p-4 bg-white rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-2 text-indigo-600">Skill Breakdown</h2>
          <div className="grid grid-cols-2 gap-2">
            <div className="p-2 border rounded">
              <span className="font-medium">Hiragana:</span> {score.hiragana}/2
            </div>
            <div className="p-2 border rounded">
              <span className="font-medium">Katakana:</span> {score.katakana}/2
            </div>
            <div className="p-2 border rounded">
              <span className="font-medium">Vocabulary:</span> {score.vocab}/1
            </div>
            <div className="p-2 border rounded">
              <span className="font-medium">Grammar:</span> {score.grammar}/15
            </div>
            <div className="p-2 border rounded">
              <span className="font-medium">Kanji:</span> {score.kanji}/2
            </div>
          </div>
        </div>
        
        <div className="mb-6 p-4 bg-white rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-2 text-indigo-600">Recommended Study Level</h2>
          <div className="p-3 bg-indigo-50 rounded mb-2">
            <p className="font-bold">For Genki: {results.recommendedGenki}</p>
          </div>
          <div className="p-3 bg-indigo-50 rounded">
            <p className="font-bold">For Japanese From Zero: {results.recommendedJFZ}</p>
          </div>
        </div>
        
        <div className="mb-6 p-4 bg-white rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-2 text-indigo-600">Stage Mastery</h2>
          {results.stageMastery.map((stage, index) => (
            <div key={index} className={`p-2 mb-2 rounded ${stage.mastered ? 'bg-green-100' : 'bg-amber-100'}`}>
              <div className="flex justify-between items-center">
                <span className="font-medium">{stage.name}</span>
                <span>{Math.round(stage.masteryPercentage)}% mastered</span>
              </div>
            </div>
          ))}
        </div>
        
        <button 
          onClick={resetQuiz}
          className="w-full py-3 bg-indigo-600 text-white font-bold rounded hover:bg-indigo-700 transition"
        >
          Retake Quiz
        </button>
      </div>
    );
  }

  const currentQuiz = quizStages[currentStage];
  const question = currentQuiz.questions[currentQuestion];

  return (
    <div className="p-6 bg-gray-50 rounded-lg shadow-lg max-w-2xl mx-auto">
      <div className="mb-4">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-bold text-indigo-700">{currentQuiz.name}</h2>
          <span className="text-sm text-gray-500">
            Question {currentQuestion + 1}/{currentQuiz.questions.length}
          </span>
        </div>
        <div className="w-full bg-gray-200 h-2 rounded-full mt-2">
          <div 
            className="bg-indigo-600 h-2 rounded-full" 
            style={{ width: `${((currentQuestion + 1) / currentQuiz.questions.length) * 100}%` }}
          ></div>
        </div>
      </div>
      
      <div className="mb-6 p-4 bg-white rounded-lg shadow">
        <p className="text-lg font-medium mb-4">{question.question}</p>
        
        <div className="space-y-2">
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => !showExplanation && handleAnswerSelect(option)}
              className={`w-full p-3 text-left rounded ${
                showExplanation
                  ? option === question.correctAnswer
                    ? 'bg-green-100 border-green-500 border'
                    : option === selectedAnswer
                    ? 'bg-red-100 border-red-500 border'
                    : 'bg-gray-100 border-gray-300 border'
                  : selectedAnswer === option
                  ? 'bg-indigo-100 border-indigo-500 border'
                  : 'bg-gray-100 hover:bg-gray-200 border-gray-300 border'
              } transition`}
              disabled={showExplanation}
            >
              {option}
            </button>
          ))}
        </div>
      </div>
      
      {showExplanation && (
        <div className={`mb-6 p-4 rounded-lg ${
          selectedAnswer === question.correctAnswer ? 'bg-green-100' : 'bg-red-100'
        }`}>
          <p className="font-medium">
            {selectedAnswer === question.correctAnswer 
              ? 'Correct! 正解です！' 
              : `Incorrect. The correct answer is ${question.correctAnswer}`
            }
          </p>
        </div>
      )}
      
      <div className="flex justify-between">
        <div className="text-sm text-gray-500">
          Stage {currentStage + 1}/{quizStages.length}
        </div>
        
        {showExplanation && (
          <button 
            onClick={handleNextQuestion}
            className="px-4 py-2 bg-indigo-600 text-white font-medium rounded hover:bg-indigo-700 transition"
          >
            Next Question
          </button>
        )}
      </div>
    </div>
  );
};

export default JapaneseProficiencyQuiz;
